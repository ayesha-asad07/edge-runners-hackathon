import json
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

def load_data(filename="malware_data.json"):
    with open(filename, "r") as infile:
        data = json.load(infile)
    return data

def prepare_data(data):
    X = []
    y = []
    
    severity_mapping = {"Low": 0, "Medium": 1, "High": 2}
    unusual_mapping = {"yes": 1, "no": 0}
    
    for sample in data:
        timestamp = sample.get("Timestamp", 0)
        severity = severity_mapping.get(sample.get("Severity", "Low"), 0)
        is_unusual = unusual_mapping.get(sample.get("Is the event unusual?", "no"), 0)
        
        # Features and label
        features = [timestamp, severity]
        X.append(features)
        
        # Label
        label = is_unusual
        y.append(label)
    
    return np.array(X), np.array(y)

def train_model(X, y):
    if X.size == 0:
        raise ValueError("Feature array X is empty. Please check the data preparation.")
    if y.size == 0:
        raise ValueError("Label array y is empty. Please check the data preparation.")
    
    input_dim = X.shape[1]
    print(f"Building model with input dimension: {input_dim}")
    
    model = Sequential()
    model.add(Dense(64, input_dim=input_dim, activation="relu"))
    model.add(Dense(32, activation="relu"))  # Optionally adjust the number of neurons
    model.add(Dense(1, activation="sigmoid"))

    model.compile(loss="binary_crossentropy", optimizer="adam", metrics=["accuracy"])
    model.fit(X, y, epochs=10, batch_size=16, validation_split=0.2)

    return model

def main():
    data = load_data('malware_data.json')
    X, y = prepare_data(data)
    
    model = train_model(X, y)
    
    model.save("phi3_model.h5")
    print("Model trained and saved as phi3_model.h5")

if __name__ == "__main__":
    main()
